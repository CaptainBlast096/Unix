#!/bin/bash
 
#Author: Jaleel Rogers
#Class: COP3353
#Proffesor: Wang
#Due Date: 10/30/2022
#Description: A National Game of Guessing Numbers
lvl=1 # Decides difficulty rating
num=1 # Stores the correct number user has to guess
count=1 # Stores ammount of guesses the user makes for each guess
time=0 # Stores the amount of time it takes for user to guess
continue="Y"
regionNum=0
region="SOUTH"
seasonNum=0
nameNum=0
season="SPRING"
gameId=0
myScore=0
 
 
checkData()
{
#Make three separate if statments for each directory and or file
echo "-------------------------------------------"
echo "loading data and initialize data structures"
if [ ! -d ./data ] # -d command checks if the directory exists or not
then
    echo "./data folder not exist, creating it..."
    mkdir ./data;
    echo "./data folder created."
else    
    echo "./data folder created."
fi
 
if [ ! -f ./data/regionresults.txt ] # -f command checks if the file exists or not
then
    echo "./data/regionresults.txt not exist, creating it..."
    touch ./data/regionresults.txt;
    echo "./data/regionresults.txt folder created."
else    
    echo "./data/regionresults.txt folder created."
fi
 
if [ ! -f ./data/nationresults.txt ] # -f command checks if the file exists or not
then
    echo "./data/nationresults.txt not exist, creating it..."
    touch ./data/nationresults.txt; # touch command used for file creation
    echo "./data/nationresults.txt folder created."
else    
    echo "./data/nationresults.txt folder created."
fi
echo "-------------------------------------------"
}
 
loadData() # %d takes integer value as signed decimal integer | %s lets you add a string | %f is floating point number
{
printf "%d,%s,%s,%s,%d,%d,%d,%f\n" $gameId "$name" "$region" "$season" $lvl $count $time $myScore >> ./data/regionresults.txt
}
 
getData()
{
    name=$(awk -F',' '{if($1=='$gameId') print $2}' ./data/regionresults.txt | tail -n 1)
    region=$(awk -F',' '{if($1=='$gameId') print $3}' ./data/regionresults.txt | tail -n 1)
    season=$(awk -F',' '{if($1=='$gameId') print $4}' ./data/regionresults.txt | tail -n 1)
 
   # name=$(awk -F',' '{if($1=='$gameId') print $2}' ./data/regionresults.txt | tail -n 1)# awk is used to search one or more files to see if they contain lines that match the patterna nd perform an action
  #  region=$(awk -F',' '{if($1=='$gameId') print $3}' ./data/regionresults.txt | tail -n 1) # awk F- specify a file that contains awk script
  #  season=$(awk -F',' '{if($1=='$gameId') print $4}' ./data/regionresults.txt | tail -n 1)
}
 
echo -n 'Enter your command:'
quitStatus="2"
cat << EOF #Problem 1 decide how 'Enter your command:' will work
 
||||||  ||   ||  |||||||    ||||||   ||||||     ||||         ||||
|       ||   ||  |         |||  ||| |||  ||| |||||||||||||||||||||||
|       ||   ||  |         |||       |||        ||||         ||||
|       ||   ||  |||||||    |||       |||       ||||         ||||
|  |||  ||   ||  |           |||       |||      ||||         ||||
|    |  ||   ||  |       |||  |||  |||  |||  |||||||||||||||||||||||
||||||  |||||||  |||||||  ||||||    ||||||      ||||         ||||
 
EOF
 
 
#Order structures of commands in logical order. For example you would have your change diffiulty before the actual excercise.
help()
{
cat<<EOF
Usage: use single letter command to play the game
h - help, show this command list
e - do excercise by oneself
c - change game difficulty level
q - quit the game
p - participate competition
s - show my score in descending order
l - show my place in all gamers
EOF
}
 
difficulty()
{
cat<<EOF
    --- About Difficulty Level ---
Level 1: guess a number between 1 to 100
Level 2: guess a number between 1 to 1000
Level 3: guess a number between 1 to 10000
=== Current Difficulty Level : $lvl ===
1) EASY
2) INTERMEDIATE
3) HARD
EOF
 
read -p "Select a new difficulty level:" lvl
 
echo "=== New Difficulty Level: $lvl ==="
}
 
getGameId()
{
read -r -p "Please enter your UNIQUE 9 digits gamer ID:" gameId #-p command makes it read as a prompt
 
while [[ ! $gameId =~ ^[0-9]{9} ]]
do
    echo "Your Gamer ID $gameId is not 9 digits!"
    read -r -p "Please enter your UNIQUE 9 digits gamer ID: " gameId
done
 
}
 
selectName()
{
    read -r -p "Please enter you name: " name
    while [[  $name =~ [^a-zA-Z] ]]
do
    echo "Your name can contain only letters!"
    read -r -p "Please enter you name: " name
done
echo""
}
 
selectRegion()
{
echo"" #using as a space to separate selectRegion from getGameId
cat<<EOF
Available regions for competition:
1) SOUTH
2) NORTHEAST
3) MIDWEST
4) WEST
EOF
 
read -r -p "Please select a region:" regionNum
while [[ ! $regionNum =~ ^[1-4] ]]
do
    echo "You didn't make your choice!"
    read -r -p "Please select a region: " regionNum
done
 
case $regionNum in
    1) region="SOUTH";;
    2) region="NORTHEAST";;
    3) region="MIDWEST";;
    4) region="WEST";;
    *) echo "You didn't make your choice!"
esac
selectSeason
}
 
selectSeason()
{
season="SPRING"
seasonNum=0
cat<<EOF
Seasons for regional competition:
1) Spring
2) Summer
3) Fall
EOF
 
read -r -p "Please select a season:" seasonNum
while [[ ! $seasonNum =~ ^[1-3] ]]
do
    echo "You didn't make your choice!"
    read -r -p "Please select a season: " seasonNum
done
 
case $seasonNum in
    1) season="SPRING";;
    2) season="SUMMER";;
    3) season="FALL";;
    *) echo "You didn't make your choice!"
esac
if [ $nameNum -eq 0 ]
then
    echo ""
    selectName
fi
}
 
participate()
{
   echo "Welcome to the national game of guessing numbers!"
getGameId
 
if [[ $(grep -c "$gameId" ./data/regionresults.txt) -eq 0 ]] # grep command searches the given files for lines containing a match to a given pattern list
 
then
nameNum=0
selectRegion
else
    getData
    echo "Hello $name, welcome back!"
    record=$(grep -c "$gameId" data/regionresults.txt) # c- command option is present, then commands are read from string
    echo -n "You have competed $record times in the regional arenas, " #Turn into a conditional statment
    if [[ $record -lt 3 ]]
    then
    echo "You still can complete $((3 - record)) times in the regional arenas."
    nameNum=1
    selectRegion
    else
    echo "please participate the national arena if you are qualified."
    fi
fi
}
 
showData()
{
    getGameId
    record=$(grep -c "$gameId" data/regionresults.txt)
    if [[ record -eq 0 ]]
    then
           cat<<EOF
    You did NOT participate any regional arenas yet.
    Please participate regional arenas first.
                Good luck!
EOF
    else #Issues with printing score
        getData
        echo "Hello $name, here are your Competitions"
        cat <<EOF
-------------------------------------------------
Region     Season   Level    Times Seconds  Score
-------------------------------------------------
EOF
        awk -F',' '{if($1=='$gameId') printf("%-10s %-10s %-8d %-5d %-6d %3.2f\n", $3, $4, $5, $6, $7, $8)}' ./data/regionresults.txt | sort -k1,1nr -k2,2
        echo "-------------------------------------------------"
    fi
   
}
 
excercise()
{
starting=$SECONDS
cat<<EOF
     _                     _      _                                          
    )_)   _   _   _ )       )    / _  _   |                                    
    / \   )_) (_( (_(  (_(  o    (__/ (_) o                                  
         (_              _)
=== Current Difficulty Level : $lvl ===                                                    
guess a number between 1 to $((10**lvl*10))  
EOF
 
echo
targetNum=$(($RANDOM % (10**lvl*10))) #** acts like the power
#The random parameter
#The $ symbol signifys sending data you write to a second command's standard input
 
while [ $continue != "N" ] && [ $continue != "n" ] #When you chose option 2
do
 
time=$((SECONDS - $starting))
read -p "Your guess:" num
 
if [ $num -gt $targetNum ]
then
    echo "too large"
#fi
 
elif [ $num -lt $targetNum ]
then
    echo "too small"
#fi
 
elif [ $num -eq $targetNum ]
then
    ((myScore= (lvl*10000)/(time*count))) #Equation for score
cat<<EOF
    Congratulation! You get it!
    You used $time seconds, tried $count times, scored $myScore
EOF
 
read -r -p "Continue Practicing? Enter Y or N:" continue
targetNum=$((RANDOM % (10**lvl*10)))
#Modification for Stage 2
if [[ "$continue" = "Y"  ||  "$continue" = "y" ]]
then starting=$SECONDS;
fi
 
if [ ! $gameId -eq 0 ]
then loadData;
fi
fi
((count++))
done
}
 
scoreBoard()
{
getGameId
record=$(grep -c "$gameId" data/regionresults.txt)
if [[ record -eq 0 ]]
then
    cat<<EOF
You did NOT participate any regional arenas yet.
Please participate regional arenas first.
            Good luck!
EOF
    else
        getData
        RED="\033[0;31m"
        NC="\033[0m"
        echo -e "===== ${RED} regional competition results ${NC}======"
 cat <<EOF
----------------------------------------------------------------------------
ID        Name             Region     Season   Level    Times Seconds  Score
----------------------------------------------------------------------------
EOF
        sort -t, -nrk8 ./data/regionresults.txt | awk -F',' '{
        if($1=='$gameId')
            printf("'$RED'%s %-16s %-10s %-8s %-8d %-5d %-7d %6.2f\n",$1, $2, $3, $4, $5, $6, $7, $8);
        else
            printf("'$NC'%s %-16s %-10s %-8s %-8d %-5d %-7d %6.2f\n",$1, $2, $3, $4, $5, $6, $7, $8)
        }';
 
        echo -e "${NC}\c"
        echo "----------------------------------------------------------------------------"
        fi
}
 
quit()
{
cat<<EOF
Are you sure to quit this game?
1) Y
2) N
EOF
read -p "Make your choice:" quitStatus
}
 
checkData
help
while [ $quitStatus != "1" ] #Beginning of do while loop
do
echo
read -p "Enter your command:" userInput #Enter command can go here so it appears before the prompt and user input
 
case $userInput in #Beginning of the case...esac statement
    h) help;;    
    e) excercise;;
    c) difficulty;;
    q) quit;;
    p) participate;;
    s) showData;;
    l) scoreBoard;;
    *) echo "Invalid entry. Please try an option on the menu";;
esac #End of the case...esac statment
done #End of do while loop
